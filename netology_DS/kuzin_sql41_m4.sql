--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
 
--СОЗДАНИЕ отдельной схемы в локальной базе, для удобства
create schema kuzin_sql41_m4

--ПРЕКЛЮЧЕНИЕ на новую созданную схему
set search_path to kuzin_sql41_m4

--ПРОВЕРКА что мы в верной схеме
select current_schema()

--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ
create table language (
	language_id serial primary key,
	"name" bpchar(20) not null unique,
	last_update timestamp not null default now()
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ
insert into "language" ("name")
select "name" from public."language"


--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ
create table nation (
	nation_id serial primary key,
	"name" varchar(50) not null unique,
	last_update timestamp not null default now()
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ
insert into nation
	("name")
values
	('Русские Великоруссы'),
	('Украинцы'),
	('Белоруссы'),
	('Поляки'),
	('Чехи'),
	('Словаки'),
	('Сербы'),
	('Болгары'),
	('Латыши'),
	('Литовцы'),
	('Латгальцы'),
	('Жмудь Жмудины (*)'),
	('Немцы'),
	('Англичане'),
	('Шведы'),
	('Голландцы'),
	('Итальянцы'),
	('Французы'),
	('Румыны'),
	('Молдаване'),
	('Греки Эллины'),
	('Албанцы Арнауты'),
	('Евреи'),
	('Евреи крымские'),
	('Евреи горские Даг-чуфут'),
	('Евреи грузинские'),
	('Евреи средне-азиатские Джугут'),
	('Караимы'),
	('Финны'),
	('Финны ленинградские Чухонцы'),
	('Карелы'),
	('Тавасты'),
	('Эсты Эстонцы'),
	('Вепсы Чухари ЧудьКайваны'),
	('Водь Воты Вадья Вадьялайзет'),
	('Ижоры Ингры'),
	('Квены'),
	('Лопари'),
	('Зыряне Коми'),
	('Пермяки'),
	('Вотяки Удмурт'),
	('Бесермяне'),
	('Марийцы Мари Черемисы'),
	('Мордва Ерзя Мокша Терюхане Каратаи'),
	('Мадьяры Венгерцы'),
	('Гагаузы'),
	('Чуваши'),
	('Татары'),
	('Мишари Мещеряки'),
	('Башкиры Башкурд'),
	('Нагайбаки'),
	('Ногайцы Ногайлы'),
	('Цыгане'),
	('Калмыки'),
	('Монголы'),
	('Буряты'),
	('Сарт-калмыки'),
	('Вогулы Манзи'),
	('Остяки Ханды'),
	('Остяко-самоеды'),
	('Самоеды Хазово Пян-хазово'),
	('Юраки'),
	('Сойоты Сойоны Туба Урянхайцы'),
	('Барабинцы Татары Барабинские (*)'),
	('Бухарцы Бухарлык'),
	('Черневые татары ТубакиишТубалар'),
	('Алтайцы Алтай-киши Горные или белые калмыки'),
	('Телеуты'),
	('Теленгеты Теленгуты'),
	('Кумандинцы Кукиши Лебединцы'),
	('Шорцы'),
	('Карагас Туба Карагазы'),
	('Кизильцы Кызыльцы (*)'),
	('Качинцы'),
	('Сагаи Сагайцы'),
	('Койбалы Кайбалы'),
	('Бельтиры'),
	('Долганы Долгано-якуты'),
	('Якуты Саха Уренхай-саха'),
	('Тунгусы Овенки Мурчени Хамнегань'),
	('Ламуты'),
	('Орочоны'),
	('Гольды Нанай Ходзен'),
	('Ольчи Мангуны Ульча'),
	('Негидальцы Негды Элканбейе'),
	('Орочи'),
	('Удехе'),
	('Ороки'),
	('Манегры'),
	('Самогиры'),
	('Манджуры'),
	('Чукчи'),
	('Коряки'),
	('Камчадалы Ительмены'),
	('Гиляки Нигивын Нивух'),
	('Юкагиры'),
	('Чуванцы'),
	('Алеуты'),
	('Эскимосы'),
	('Енисейцы Кето Остяки енисейские'),
	('Айны Айну Куги'),
	('Китайцы'),
	('Корейцы'),
	('Японцы'),
	('Грузины Картвелы'),
	('Аджарцы'),
	('Мегрелы Мингрельцы'),
	('Лазы Чаны'),
	('Сваны Сванеты'),
	('Абхазы Абхазцы'),
	('Черкесы Адыге'),
	('Бескесек-абаза Абазинцы Черкесские абхазы'),
	('Кабардинцы'),
	('Убыхи (*)'),
	('Чечены Нахчии Нахчуо'),
	('Ингуши Галга Кисты'),
	('Бацбии Цова-туши Бацы'),
	('Маиствеи Махистуи'),
	('Лезги Кюрины Кюрегю'),
	('Табасараны'),
	('Агулы'),
	('Арчинцы'),
	('Рутулы Мыхады'),
	('Цахуры'),
	('Хиналуги'),
	('Джеки Джекцы'),
	('Хапутцы Гапутлинцы Хапутлинцы (*)'),
	('Крызы Крысы (*)'),
	('Будухи Будугцы'),
	('Удины'),
	('Даргинцы'),
	('Кубачинцы Ухбукаи'),
	('Лаки Кази-Кумуки'),
	('Авары Аварцы Хунзы'),
	('Андии Андийцы Куаннал'),
	('Ботлихцы Буюхады'),
	('Годоберинцы'),
	('Каратаи'),
	('Ахвахцы Ахвак Садакилиду'),
	('Багулалы Кванандийцы Ганитлала'),
	('Чамалалы'),
	('Тиндии Тиндалы Идери'),
	('Дидои Цецы Цезы Цунтал'),
	('Хваршины Хуарши Хуаны'),
	('Капучины Бешитль'),
	('Хунзалы Гунзал Нахады Ензеби'),
	('Армяне'),
	('Хемшины'),
	('Арабы'),
	('Айсоры Сирийцы Халдеи Сиро-халдейцы'),
	('Кайтаки Каракайтахи'),
	('Боша Карачи Цыгане армянские (*)'),
	('Осетины Осы'),
	('Курды'),
	('Иезиды Езиды'),
	('Талыши'),
	('Таты'),
	('Персы Персияне'),
	('Карачаи'),
	('Кумыки'),
	('Балкары Горские татары Молкар'),
	('Карапапахи'),
	('Тюрки'),
	('Тюрки османские Османлы'),
	('Тюрки самаркандские и ферганские'),
	('Туркмены'),
	('Кыргызы Киргизы БурутыКара-Киргизы'),
	('Каракалпаки'),
	('Кипчаки'),
	('Кашгарцы Кашгарлык'),
	('Таранчи'),
	('Казаки Киргиз-казаки Киргиз-кайсаки'),
	('Курама Кураминцы'),
	('Узбеки'),
	('Дунгане Дункане'),
	('Афганцы Пухту Пушту'),
	('Таджики'),
	('Ваханцы Вахи Вух (*)'),
	('Ишкашимцы Ишкошуми'),
	('Шугнанцы'),
	('Ягнобцы Ягноби'),
	('Язгулямцы Юздом'),
	('Ирани'),
	('Джемшиды'),
	('Белуджи'),
	('Бербери'),
	('Хазара Хезарейцы (*)'),
	('Индусы Индийцы')


--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ
create table country (
	country_id serial primary key,
	"name" varchar(50) not null unique,
	last_update timestamp not null default now()
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ
insert into country ("name")
select "country" from public."country"


--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table language_nation (
	language_id int2 not null references language(language_id),
	nation_id  int2 not null references nation(nation_id),
	last_update timestamp not null default now(),
	primary key (language_id, nation_id)
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into language_nation 
	(language_id, nation_id)
values
	(1,1),
	(2,10),
	(3,45),
	(4,34),
	(5,77),
	(6,50),
	(3,99),
	(2,22)


--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table nation_country (
	nation_id  int2 not null references nation(nation_id),
	country_id int2 not null references country(country_id),
	last_update timestamp not null default now(),
	primary key (nation_id, country_id)
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into nation_country 
	(nation_id, country_id)
values
	(23,130),
	(63,43),
	(78,55),
	(12,27),
	(32,99),
	(56,77),
	(102,69),
	(150,26)


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============
--ПЕРЕКЛЮЧАЕМСЯ обратно на локальную схему public и проверяем
set search_path to public
select current_schema()

--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.
create table film_new (
	film_name varchar(255) not null,
	film_year int check(film_year > 0),
	film_rental_rate numeric(4,2) default 0.99,
	film_duration int not null check(film_duration > 0)
);
--дополнительно задал описание для таблицы и колонок
comment on column film_new.film_name is 'название фильма';
comment on column film_new.film_year is 'год выпуска фильма';
comment on column film_new.film_rental_rate is 'стоимость аренды фильма';
comment on column film_new.film_duration is 'длительность фильма в минутах';
comment on table film_new is 'Новая таблица для домашнего задания по теме "Углубление в SQL"';


--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]
insert into film_new 
	(film_name, film_year, film_rental_rate, film_duration)
	SELECT *
	FROM 
		unnest(
			array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List'],
			array[1994, 1999, 1985, 1994, 1993],
			array[2.99, 0.99, 1.99, 2.99, 3.99],
			array[142, 189, 116, 142, 195]
		)


--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41
update 
	film_new 
set 
	film_rental_rate = film_rental_rate + 1.41


--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new
alter table film_new add column deleted int2 not null default 0; -- помнится на вебинаре говорилось что данные удалять не нужно, поэтому добавил новый столбец
update film_new SET deleted = 1 where film_id = 3;

--НО если это принципиально для задания, то вот:
delete from film_new where film_id = 3;


--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме
insert into film_new
	(film_name, film_year, film_rental_rate, film_duration)
values
	('Любовь и голуби', 1985, 7.99, 106)


--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых
select 
	*, 
	round(film_duration::numeric / 60, 1) "длительность фильма в часах"
from
	film_new


--ЗАДАНИЕ №7 
--Удалите таблицу film_new
DROP TABLE film_new